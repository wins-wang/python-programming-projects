#Assignment 0701 War and Random NUmbers
#Dawei Wang May.22,2020
#YouTube Video Link: https://youtu.be/0SNObokvu1M 
#I have not given or received any unauthorized assistance on this assignment.
import datetime

class WarAndPeacePseudoRandomNumberGenerator:

    def __init__(self, seed = -1):
        '''constructor that initializes seed, cursor'''
        # if no seed assigned by user, seed = -1, use current minute and second as seed
        if seed == -1:
            self.seed = int(datetime.datetime.now().strftime('%H%M%S'))
        # otherwise, use seed assigned by user
        else: 
            self.seed = seed
        # set the initial cursor position 
        self.cursor = self.seed
    
    def random(self):
        'Generate the random number by using the seed and the code book'
        # open the code book
        # term is a unit for generate a bits 
        # self.number will be sum of all numbers from bits and return as a random number generated
        # length is the length of the code book, for cursor reset when overflow
        # step is the difference that we read for the next 
        self.infile = open("D:\\war-and-peace.txt",'rb')
        term = 1 
        self.number = 0
        length = 3226615 
        step = 200
        # we will have 32 terms here and iteratively add to the random
        while term < 33:
            # set the cursor to the appropriate position and read the character at that position
            self.infile.seek(self.cursor)
            bits_a = self.infile.read(1)
            # move the cursor to the next position and get back to the front when overflow 
            if self.cursor + step > length:
                self.cursor = step - length + self.cursor
            else:
                self.cursor += step
            # set the cursor to the appropriate position and read the character at that position
            self.infile.seek(self.cursor)
            bits_b = self.infile.read(1)
            # move the cursor to the next position
            if self.cursor + step > length:
                self.cursor = step - length + self.cursor
            else:
                self.cursor += step
            # if two characters are identical, find another pair of bits
            if bits_a == bits_b:
                continue
            # a > b set number to 0, a < b set number to 1
            elif bits_a > bits_b:
                numb = 0
            else: numb = 1
            # add number generated by this term to self.number and enter the next term
            self.number += (numb / (2 ** term))
            term += 1
        # close the code book and return the random number
        self.infile.close()
        return self.number
              
# find the length of code book
# howlong = open(r"D:\\war-and-peace.txt")
# str = howlong.read()
# len(str)

# class test 
prng = WarAndPeacePseudoRandomNumberGenerator()
prng.random()
prng.random()
prng.random()
prng = WarAndPeacePseudoRandomNumberGenerator()
prng.random()
prng.random()
prng = WarAndPeacePseudoRandomNumberGenerator(12345)
prng.random()
prng.random()
prng.random()
prng = WarAndPeacePseudoRandomNumberGenerator(12345)
prng.random()
prng.random()
prng.random()


def main():
    # create a new ovject prng and an empty list
    prng = WarAndPeacePseudoRandomNumberGenerator()
    list = []
    print("Generating Random numbers ...\n")
    # generate 10,000 random number and store them in the list
    for i in range(10000):
       list.append(prng.random())
    # find the 
    m = min(list)
    n = max(list)
    mean = sum(list)/len(list)
    print("10,000 Random numbers have generated. \n")
    print("For these 10,000 random number: \nminimum: {} maximum: {} mean: {}".format(m, n, mean))


main()